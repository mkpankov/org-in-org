* Emacs Org-Mode Cheat-sheet in Org-Mode
** Document structure
*** Headings and outlines

#+BEGIN_EXAMPLE

     * Top level headline

     ** Second level

     *** 3rd level
         some text

     *** 3rd level
         more text

     * Another top level headline

#+END_EXAMPLE

*** Visibility cycling

| ~<TAB>~   | Rotate sub-tree between Folded, Children, Subtree states             |
| ~S-<TAB>~ | Rotate the entire buffer between Overview, Contents, Show All states |

*** Motion

| ~C-c C-n~ | Next heading                     |
| ~C-c C-p~ | Previous heading                 |
| ~C-c C-f~ | Next heading same level          |
| ~C-c C-b~ | Previous heading same level      |
| ~C-c C-u~ | Backward to higher level heading |

*** Structure editing

| ~M-<RET>~            | Insert new heading with same level as current            |
| ~M-S-<RET>~          | Insert new TODO entry with same level as current heading |
| ~<TAB>~ in new entry | Cycle through reasonable levels                          |
| ~M-<left>/<right>~   | Promote/demote current heading by one level              |
| ~M-S-<left>/<right>~ | Promote/demote the current sub-tree by one level         |
| ~M-S-<up>/<down>~    | Move sub-tree up/down                                    |
| ~C-c C-w~            | Refile entry or region to a different location           |
| ~C-x n s/w~          | Narrow buffer to current subtree / widen it again        |

*** Sparse trees

| ~C-c /~   | Enter prompt of sparse tree creation command           |
| ~C-c / /~ | Create sparse tree by occurrence of regular expression |

*** Plain lists

*Remember* to start list item at second column or later, otherwise it will be
 treated as first-level heading!

 * Unordered lists :: use '~-~', '~+~' or '~*~' as bullets
 * Ordered lists :: use '~1.~' or '~1)~' as bullets
 * Description lists :: use ' ~::~ ' to separate the term from the description

| ~<TAB>~              | Fold list item                                                |
| ~M-<RET>~            | Insert new item at current level                              |
| ~M-S-<RET>~          | Insert a new item with a checkbox                             |
| ~M-S-<up>/<down>~    | Move the item including sub-items up/down                     |
| ~M-<left>/<right>~   | Decrease/increase the indentation of an item (w/o children)   |
| ~M-S-<left>/<right>~ | Decrease/increase the indentation of the item (with children) |
| ~C-c C-c~            | Toggle the checkbox; also make sure the list is consistent    |
| ~C-c -~              | Cycle the entire list level through different bullets         |

*** Footnotes

#+BEGIN_EXAMPLE

The Org homepage[fn:1] now looks a lot better than it used to.
...
[fn:1] The link is: http://orgmode.org

#+END_EXAMPLE

| ~C-c C-x f~     | Jump to definition, first reference, or offer to create a new footnote |
| ~C-u C-c C-x f~ | A menu of additional footnotes options                                 |
| ~C-c &~         | Go back after jumping to definition
| ~C-c C-c~       | Jump between definition and reference (if unique)                      |

** Tables

#+BEGIN_EXAMPLE
| Name  | Phone | Age |
|-------+-------+-----|
| Peter |  1234 |  17 |
| Anna  |  4321 |  25 |
#+END_EXAMPLE

*** Creation and conversion

| ~C-c \vert~            | Convert the active region to table                              |
| ~\vert- <TAB>~         | Make a separator and move to next cell                          |
| ~\vert ... \vert<TAB>~ | Continue the table by taking the top row and extending it below |

*** Re-aligning and field motion

| ~C-c C-c~ | Re-align the table w/o moving the cursor      |
| ~<TAB>~   | Re-align the table and move to the next field |
| ~S-<TAB>~ | Re-align and move to the previous field       |
| ~<RET>~   | Re-align and move down to the next row        |

*** Column and row editing

| ~M-<left>/<right>~ | Move the current column left/right                                              |
| ~M-S-<left>~       | Kill the current column                                                         |
| ~M-S-<right>~      | Insert a new column to the left of cursor                                       |
| ~M-<up>/<down>~    | Move the current row up/down                                                    |
| ~M-S-<up>~         | Kill the current row or horizontal line                                         |
| ~M-S-<down>~       | Insert a new row above the current row                                          |
| ~C-c -~            | Insert a horizontal line below the current row                                  |
| ~C-c <RET>~        | Insert a horizontal line below the current row, and move to row below that line |
| ~C-c ^~            | Sort the table lines in the region                                              |

** Hyperlinks

*** Link format

: [[link][description]]

or, alternatively,

: [[link]]

*** Internal links

: [[#my-custom-id]]
links to the entry with ~CUSTOM_ID~ property '~my-custom-id~'.

: [[My Target]]
or
: [[My Target][Find my target]]
lead to a text search in the current file for the target '~<<My Target>>~'.

*** External links

#+BEGIN_EXAMPLE
     http://www.astro.uva.nl/~dominik          on the web
     file:/home/dominik/images/jupiter.jpg     file, absolute path
     /home/dominik/images/jupiter.jpg          same as above
     file:papers/last.pdf                      file, relative path
     file:projects.org                         another Org file
     docview:papers/last.pdf::NNN              open file in doc-view mode at page NNN
     id:B7423F4D-2E8A-471B-8810-C40F074717E9   Link to heading by ID
     news:comp.emacs                           Usenet link
     mailto:adent@galaxy.net                   Mail link
     vm:folder                                 VM folder link
     vm:folder#id                              VM message link
     wl:folder#id                              WANDERLUST message link
     mhe:folder#id                             MH-E message link
     rmail:folder#id                           RMAIL message link
     gnus:group#id                             Gnus article link
     bbdb:R.*Stallman                          BBDB link (with regexp)
     irc:/irc.com/#emacs/bob                   IRC link
     info:org:External%20links                 Info node link (with encoded space)
#+END_EXAMPLE

May contain descriptive text:
: [[http://www.gnu.org/software/emacs/][GNU Emacs]]

*** Handling links

| ~C-c l~   | Store a link to the current location |
| ~C-c C-l~ | Insert or edit a link                |
| ~C-c C-o~ | Open link at point                   |
| ~C-c &~   | Jump back to a recorded position     |

*** Targeted links

#+BEGIN_EXAMPLE
[[file:~/code/main.c::255]]                 Find line 255
[[file:~/xx.org::My Target]]                Find ‘<<My Target>>’
[[file:~/xx.org::#my-custom-id]]            Find entry with custom id
#+END_EXAMPLE

** Todo Items

*** Using TODO states

: *** TODO Write letter to Sam Fortune

| ~C-c C-t~          | Rotate the TODO state                         |
| ~S-<right>/<left>~ | Select the following/preceding TODO state     |
| ~C-c / t~          | View TODO items in a sparse tree              |
| ~C-c a t~          | Show the global TODO list                     |
| ~S-M-<RET>~        | Insert a new TODO entry below the current one |

*** Multi-state workflows

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
  '((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))
#+END_SRC
or
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "|" "DONE(d)")
        (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
        (sequence "|" "CANCELED(c)")))
#+END_SRC

TODO keywords for a single file:
#+BEGIN_EXAMPLE
#+TODO: TODO(t) | DONE(d)
#+TODO: REPORT(r) BUG(b) KNOWNCAUSE(k) | FIXED(f)
#+TODO: | CANCELED(c)
#+END_EXAMPLE

*** Logging progress

**** Closing items

: (setq org-log-done 'time)

or

: (setq org-log-done 'note)

In-buffer settings:

: #+STARTUP: logdone

or

: #+STARTUP: lognotedone

**** Tracking TODO state changes

In TODO states specification:

: #+TODO: TODO(t) WAIT(w@/!) | DONE(d!) CANCELED(c@)

| ~!~ | timestamp |
| ~@~ | note      |

*** Priorities

: *** TODO [#A] Write letter to Sam Fortune

Org mode supports three priorities: '~A~', '~B~' and '~C~', '~A~' being
 the highest.

| ~C-c~ ~,~       | Set the priority of the current headline       |
| ~S-<up>/<down>~ | Increase/decrease priority of current headline |

*** Breaking down tasks

To break down a task headline, insert either '~[/]~' or '~[%]~' anywhere in
 the headline.

#+BEGIN_EXAMPLE
    * Organize Party [33%]
    ** TODO Call people [1/2]
    *** TODO Peter
    *** DONE Sarah
    ** TODO Buy food
    ** DONE Talk to neighbor
#+END_EXAMPLE

| ~C-c C-c~ | Update the cookie with progress |

*** Check-boxes

To insert a check-box, type ~[ ]~ in beginning of a plain list item.

#+BEGIN_EXAMPLE
    * TODO Organize party [1/3]
      - [-] call people [1/2]
        - [ ] Peter
        - [X] Sarah
      - [X] order food
      - [ ] think about what music to play
#+END_EXAMPLE

| ~C-c C-c~     | Toggle check-box status            |
| ~C-u C-c C-c~ | Toggle check-box presence          |
| ~M-S-<RET>~   | Insert a new item with a check-box |

** Tags

: * TODO Copy the report :work:urgent:

*** Tag inheritance

#+BEGIN_EXAMPLE
    * Meeting with the French group                                        :work:
    ** Summary by Frank                                              :boss:notes:
    *** TODO Prepare slides for him                                      :action:
#+END_EXAMPLE

Set tags for all items in a file to inherit:
: #+FILETAGS: :Peter:Boss:Secret:

| ~C-c~ | Activate changes in ~FILETAGS~ line |

*** Setting tags

| ~C-c C-q~ | Enter new tags for the current headline                       |
| ~C-c C-c~ | When cursor is in a headline, this does the same as ~C-c C-q~ |

You may globally specify a hard list of tags with the variable ~org-tag-alist~.
Or, for a file:

#+BEGIN_EXAMPLE
#+TAGS: @work @home @tennisclub
#+TAGS: laptop car pc sailboat
#+END_EXAMPLE

Tags with keys:
: (setq org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("laptop" . ?l)))

Or, for a file:
: #+TAGS: @work(w)  @home(h)  @tennisclub(t)  laptop(l)  pc(p)

*** Tag groups

: #+TAGS: { @read : @read_book  @read_ebook }

Or, in ~org-tag-alist~:

#+BEGIN_EXAMPLE
(setq org-tag-alist '((:startgroup . nil)
                      ("@read" . nil)
                      (:grouptags . nil)
                      ("@read_book" . nil)
                      ("@read_ebook" . nil)
                      (:endgroup . nil)))
#+END_EXAMPLE

Disable group tags:
| temporarily | ~org-toggle-tags-groups~ | ~C-c C-x q~ |
| completely  | ~org-group-tags~         |             |

*** Tag searches

| ~C-c \~   |                                                                                 |
| ~C-c / m~ | Create a sparse tree with all the headlines matching a tags search              |
| ~C-c a m~ | Create a global list of tag matches from all agenda files                       |
| ~C-c a M~ | Create a global list of tag matches from all agenda files, bug check only TODOs |

| ~+boss+urgent-project1~ | with tags '~boss~' and '~urgent~', but not '~project1~' |
| Kathy\vert{}Sally       | with tag '~Kathy~' or '~Sally~'                         |

** Properties

#+BEGIN_EXAMPLE
    * CD collection
    ** Classic
    *** Goldberg Variations
        :PROPERTIES:
        :Title:     Goldberg Variations
        :Composer:  J.S. Bach
        :Publisher: Deutsche Grammophon
        :NDisks:    1
        :END:
#+END_EXAMPLE

Inherited properties:

#+BEGIN_EXAMPLE
    * CD collection
      :PROPERTIES:
      :NDisks_ALL:  1 2 3 4
      :Publisher_ALL: "Deutsche Grammophon" Philips EMI
      :END:
#+END_EXAMPLE

or globally using ~org-global-properties~, or file-wide:

: #+PROPERTY: NDisks_ALL 1 2 3 4

| ~C-c C-x p~ | Set a property    |
| ~C-c C-c d~ | Remove a property |

** Dates and Times

*** Time stamps

**** Plain time stamp; Event; Appointment

#+BEGIN_EXAMPLE
    * Meet Peter at the movies
      <2006-11-01 Wed 19:15>
    * Discussion on climate change
      <2006-11-02 Thu 20:00-22:00>
#+END_EXAMPLE

**** Time stamp with repeater interval

#+BEGIN_EXAMPLE
    * Pick up Sam at school
      <2007-05-16 Wed 12:30 +1w>
#+END_EXAMPLE

**** Diary-style sexp entries

#+BEGIN_EXAMPLE
    * The nerd meeting on every 2nd Thursday of the month
      <%%(diary-float t 4 2)>
#+END_EXAMPLE

**** Time/Date range

#+BEGIN_EXAMPLE
    ** Meeting in Amsterdam
       <2004-08-23 Mon>--<2004-08-26 Thu>
#+END_EXAMPLE

**** Inactive time stamp

#+BEGIN_EXAMPLE
    * Gillian comes late for the fifth time
      [2006-11-01 Wed]
#+END_EXAMPLE

*** Creating time stamps

| ~C-c .~            | Prompt for a date and insert a corresponding time stamp. |
| ~C-c !~            | Like ~C-c .~, but insert an inactive time stamp          |
| ~S-<left>/<right>~ | Change date at cursor by one day                         |
| ~S-<up>/<down>~    | Change the item under the cursor in a time stamp         |

*** Deadlines and scheduling

: * TODO Take the junk out
:   DEADLINE: <2015-01-14 Ср.>

| ~C-c C-d~ | Insert '~DEADLINE~' along with a stamp |

Another example:

#+BEGIN_EXAMPLE
    *** TODO write article about the Earth for the Guide
        The editor in charge is [[bbdb:Ford Prefect]]
        DEADLINE: <2004-02-29 Sun>
#+END_EXAMPLE

Scheduling:

#+BEGIN_EXAMPLE
    *** TODO Call Trillian for a date on New Years Eve.
        SCHEDULED: <2004-12-25 Sat>
#+END_EXAMPLE

With repeater:

#+BEGIN_EXAMPLE
    ** TODO Pay the rent
       DEADLINE: <2005-10-01 Sat +1m>
#+END_EXAMPLE

Scheduled tasks will be on agenda for following days, until marked '~DONE~'.
To cancel this, set '~org-agenda-skip-scheduled-if-done~'.

*** Clocking work time

| ~C-c C-x C-i~ | Clock-in                                                |
| ~C-c C-x C-o~ | Clock-out                                               |
| ~C-c C-x C-e~ | Update the effort estimate                              |
| ~C-c C-x C-q~ | Cancel the current clock                                |
| ~C-c C-x C-r~ | Insert/update a dynamic block containing a clock report |

#+BEGIN_EXAMPLE
#+BEGIN: clocktable :maxlevel 2 :emphasize nil :scope file
#+END: clocktable
#+END_EXAMPLE

| ~C-c C-c~ | Update dynamic block at point   |
| ~l~       | In agenda or timeline, show log |

** Capture-refile-archive

*** Capture

**** Setting up a capture location

#+BEGIN_EXAMPLE
(setq org-default-notes-file (concat org-directory "/notes.org"))
(define-key global-map "\C-cc" 'org-capture)
#+END_EXAMPLE

**** Using capture

| ~C-c c~   | Start a capture process   |
| ~C-c C-c~ | Finish the capture        |
| ~C-c C-w~ | Refile the entry          |
| ~C-c C-k~ | Abort the capture process |

**** Capture templates

#+BEGIN_EXAMPLE
(setq org-capture-templates
 '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
        "* TODO %?\n  %i\n  %a")
   ("j" "Journal" entry (file+datetree "~/org/journal.org")
        "* %?\nEntered on %U\n  %i\n  %a")))
#+END_EXAMPLE

Capture templates %-escapes:

#+BEGIN_EXAMPLE
%a          annotation, normally the link created with org-store-link
%i          initial content, the region when capture is called with C-u.
%t          timestamp, date only
%T          timestamp with date and time
%u, %U      like the above, but inactive timestamps
#+END_EXAMPLE

*** Refile and copy

| ~C-c M-x~     | Copy the entry or region at point                            |
| ~C-c C-w~     | Refile the entry or region at point                          |
| ~C-u C-c C-w~ | Use the refile interface to jump to a heading                |
| ~C-u C-u C-w~ | Jump to the location where ~org-refile~ last moved a tree to |

*** Archiving

Customize the location: ~org-archive-location~.
In-buffer option:
: #+ARCHIVE: %s_done::

| ~C-c C-x C-a~ | Archive the current entry                       |
| ~C-c C-x C-s~ | Archive the subtree starting at cursor position |
| ~C-c $~       | Same as above                                   |

** Agenda views

*** Agenda files

Customize files to collect agenda items from: ~org-agenda-files~.

| ~C-c [~  | Add current file to the front of the list of agenda files |
| ~C-c ]~  | Remove current file from the list of agenda files         |
| ~C-~ ,   | Cycle through agenda file list                            |

*** Agenda dispatcher

| ~a~     | The calendar-like agenda              |
| ~t / T~ | A list of all TODO items              |
| ~m / M~ | A list of headlines                   |
| ~L~     | The timeline view                     |
| ~s~     | A list of entries selected by pattern |

*** Built-in agenda views

**** Weekly/daily agenda

| ~C-c a a~ | Compile an agenda for the current week |

#+BEGIN_EXAMPLE
    * Birthdays and similar stuff
    #+CATEGORY: Holiday
    %%(org-calendar-holiday)   ; special function for holiday names
    #+CATEGORY: Ann
    %%(diary-anniversary  5 14 1956)1 Arthur Dent is %d years old
    %%(diary-anniversary 10  2 1869) Mahatma Gandhi would be %d years old
#+END_EXAMPLE

To add appointments to Emacs notification facility, use ~org-agenda-to-appt~.

**** Global TODO list

| ~C-c a t~ | Show the global TODO list                                     |
| ~C-c a T~ | Like the above, but allows selection of specific TODO keyword |

**** Matching tags and properties

| ~C-c a m~ | Produce a list of all headlines that match a given set of tags |
| ~C-c a M~ | Like above, but only select headlines that are also TODO items |

Match syntax examples:
: +work-boss
: work|laptop
: work|laptop+night

**** Time-line

| ~C-c a L~ | Show a time-sorted view of the Org file, with all time-stamped items |

**** Search view

| ~C-c a s~ | Use search with special match syntax (like for tags) |

This command also searches files listed in ~org-agenda-text-search-extra-files~.

** Markup for rich export

*** Structural markup elements

**** Document title

: #+TITLE: This is the title of the document

**** Headings and sections

Globally: ~org-export-headline-levels~.
Per-file:
: #+OPTIONS: H:4

**** Table of contents

#+BEGIN_EXAMPLE
#+OPTIONS: toc:2          (only to two levels in TOC)
#+OPTIONS: toc:nil        (no TOC at all)
#+END_EXAMPLE

**** Paragraphs

#+BEGIN_EXAMPLE
#+BEGIN_VERSE
 Great clouds overhead
 Tiny black birds rise and fall
 Snow covers Emacs

 -- AlexSchroeder
#+END_VERSE
#+END_EXAMPLE

#+BEGIN_EXAMPLE
#+BEGIN_QUOTE
Everything should be made as simple as possible,
but not any simpler -- Albert Einstein
#+END_QUOTE
#+END_EXAMPLE

#+BEGIN_EXAMPLE
#+BEGIN_CENTER
Everything should be made as simple as possible, \\
but not any simpler
#+END_CENTER
#+END_EXAMPLE

**** Emphasis and monospace

~*bold*~, ~/italic/~, ~_underlined_~, ~=code=~, =~verbatim~=, ~+strike-through+~.

**** Comment lines

: # This is a comment
: * COMMENT This is a commented-out sub-tree
: #+BEGIN_COMMENT
: This is a commented-out region
: #+END_COMMENT

| ~C-c ;~ | Toggle the ~COMMENT~ keyword at the beginning of an entry |

*** Images and tables

Table with caption and id:

#+BEGIN_EXAMPLE
#+CAPTION: This is the caption for the next table (or link)
#+NAME:   tbl:basic-data
   | ... | ...|
   |-----|----|
#+END_EXAMPLE

A reference to that table:

: [[tab:basic-data]]

Simple image:

: [[./img/a.jpg]]

Image with caption and id:

#+BEGIN_EXAMPLE
#+CAPTION: This is the caption for the next figure link (or table)
#+NAME:   fig:SED-HR4049
[[./img/a.jpg]]
#+END_EXAMPLE

*** Literal examples

Examples:

: #+BEGIN_EXAMPLE
: Some example from a text file.
: #+END_EXAMPLE

: Here is an example:
:     : Some example from a text file.

Source code:

#+BEGIN_EXAMPLE
#+BEGIN_SRC emacs-lisp
(defun org-xor (a b)
   "Exclusive or."
   (if a (not b) b))
#+END_SRC
#+END_EXAMPLE

| ~C-c~ ' | Enter/exit editing buffer of source code |

*** Include files

: #+INCLUDE: "~/.emacs" src emacs-lisp

*** Embedded LaTeX

#+BEGIN_EXAMPLE
Angles are written as Greek letters \alpha, \beta and \gamma.  The mass if
the sun is M_sun = 1.989 x 10^30 kg.  The radius of the sun is R_{sun} =
6.96 x 10^8 m.  If $a^2=b$ and $b=2$, then the solution must be either
$a=+\sqrt{2}$ or $a=-\sqrt{2}$.

\begin{equation}
x=\sqrt{b}
\end{equation}
#+END_EXAMPLE

** Exporting

*** Export options

| ~C-c C-e #~ | Insert template with export options |

#+BEGIN_EXAMPLE
#+TITLE:       the title to be shown (default is the buffer name)
#+AUTHOR:      the author (default taken from user-full-name)
#+DATE:        a date, fixed, or an Org timestamp
#+EMAIL:       his/her email address (default from user-mail-address)
#+DESCRIPTION: the page description, e.g. for the XHTML meta tag
#+KEYWORDS:    the page keywords, e.g. for the XHTML meta tag
#+LANGUAGE:    language, e.g. ‘en’ (org-export-default-language)
#+OPTIONS:     H:2 num:t toc:t \n:nil ::t |:t ^:t f:t tex:t ...
#+END_EXAMPLE

*** The export dispatcher

| ~C-c C-e~ | Dispatcher for export and publishing commands |

*** ASCII/Latin-1/UTF-8 export

| ~C-c C-e t u~ | Export as UTF-8 file |

*** HTML export

| ~C-c C-e h h~ | Export as HTML file                            |
| ~C-c C-e h o~ | Export as HTML file and open it with a browser |

Embedded HTML:

: #+HTML: Literal HTML code for export

#+BEGIN_EXAMPLE
#+BEGIN_HTML
All lines between these markers are exported literally
#+END_HTML
#+END_EXAMPLE

*** LaTeX and PDF export

| ~C-c C-e l l~ | Export as LaTeX                                                           |
| ~C-c C-e l p~ | Export as LaTeX and then process to PDF                                   |
| ~C-c C-e l o~ | Export as LaTeX and then process to PDF, then open the resulting PDF file |

Changing the LaTeX document class:
1. Add the class to ~org-latex-classes~.
1. Set like
   : #+LATEX_CLASS: myclass

Embedded LaTeX:

#+BEGIN_EXAMPLE
#+BEGIN_LATEX
...
#+END_LATEX
#+END_EXAMPLE

*** iCalendar export

| ~C-c C-e c f~ | Create iCalendar entries for the current file                             |
| ~C-c C-e c c~ | Create a single large iCalendar file from all files in ~org-agenda-files~ |
|               | and write to file given by ~org-icalendar-combined-agenda-file~           |

** Publishing

#+BEGIN_SRC emacs-lisp
(setq org-publish-project-alist
      '(("org"
         :base-directory "~/org/"
         :publishing-directory "~/public_html"
         :section-numbers nil
         :table-of-contents nil
         :style "<link rel=\"stylesheet\"
                href=\"../other/mystyle.css\"
                type=\"text/css\"/>")))
#+END_SRC

| ~C-c C-e P x~ | Prompt for a specific project and publish all files that belong to it |
| ~C-c C-e P p~ | Publish the project containing the current file                       |
| ~C-c C-e P f~ | Publish only the current file                                         |
| ~C-c C-e P a~ | Publish every project                                                 |
| ~C-u ...~     | With any of the above, force publishing of un-changed files           |

** Working with source code

*** Structure of code blocks

#+BEGIN_EXAMPLE
#+NAME: <name>
#+BEGIN_SRC <language> <switches> <header arguments>
  <body>
#+END_SRC
#+END_EXAMPLE

~<name>~ is code block id, ~<language>~ is one of ~emacs-lisp~, ~shell~, ~R~,
 ~python~, etc., ~<switches>~ control export of the block,
 ~<header arguments>~ control code block behavior, and
 ~<body>~ contains the actual source code.

*** Editing source code

| ~C-c~ ' | Edit/exit the code block |

*** Evaluating code blocks

#+BEGIN_EXAMPLE
#+BEGIN_SRC emacs-lisp
  (+ 1 2 3 4)
#+END_SRC

#+RESULTS:
: 10
#+END_EXAMPLE

*** Extracting source code

| ~C-c C-v t~ | Extract pure source code files by extracting code from source blocks |
|             | See also: ~org-babel-expand-src-block~                               |
|             | Needs ~:tangle~ header argument                                      |

*** Library of Babel

| ~C-c C-v l~ | Load code blocks from Org-Mode files into Library of Babel |

*** Header arguments

 * ~:var~ :: Pass arguments to code blocks
 * ~:results~ :: See the Guide or Manual
 * ~:session~ :: Whether to keep a persistent inferior process
 * ~:tangle~ :: ~:tangle yes~ enables tangling of the block.
                ~:tangle filename~ specifies alternate file name.
 * ~:cache~ :: Enable caching of code block results
 * ~:noweb~ :: ~:noweb yes~ will cause expansion of "noweb" style references
 * ~:file~ :: ~:file filename~ specifies file name to save results of the block in

** Miscellaneous

*** Completion

| ~M-<TAB>~ | Auto-complete current item |

*** Clean view

To enable, use ~org-indent-mode~ at view time,
 customize ~org-startup-indented~ to enable it globally, or per-file:

: #+STARTUP: indent

To get hard spaces and indentation help from Emacs, use:

: #+STARTUP: hidestars odd
